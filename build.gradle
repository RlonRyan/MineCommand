
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}

sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir 'rsc'
        }
    }
}

// Load Properties
Properties mod = new Properties()
mod.load(new FileInputStream("${project.rootDir}/mod.properties"))

sourceCompatibility = mod.version_java
targetCompatibility = mod.version_java
version = "${mod.version_major}.${mod.version_minor}.${mod.version_patch}"
group = "${mod.group}.${mod.author}.${mod.name}"
archivesBaseName = mod.name

minecraft {
    version = "${mod.version_minecraft}-${mod.version_forge}"
    mappings = mod.version_mappings
    runDir = "../run"
    makeObfSourceJar = false
    mod.each { prop ->
        replaceIn "src/main/minecommand/MineCommandMod.java"
        replace "\${${prop.key}}", prop.value
        println prop
    }
    replaceIn "src/main/minecommand/MineCommandMod.java"
    replace "\${version}", project.version
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven/"
    }
}

dependencies {
    compile project(":lib/ModularCommands")
    // Mods (For auto-import)
    compile "codechicken:CodeChickenLib:1.8-1.1.2.139:dev"
    compile "codechicken:CodeChickenCore:1.8-1.0.5.34:dev"
    compile "codechicken:NotEnoughItems:1.8-1.0.5.82:dev"
    compile "mcp.mobius.waila:Waila:1.6.0-B2_1.8:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import java.util.regex.Pattern

task incBuild {
    def number = Integer.parseInt(mod.version_build) + 1
    def modfile = file("mod.properties")
    def modprops = modfile.getText()
    def pattern = Pattern.compile("version_build\\s+=\\s+\\d+")
    def matcher = pattern.matcher(modprops)
    modprops = matcher.replaceAll("version_build = " + number)
    modfile.write(modprops)
}

build.dependsOn(incBuild)
